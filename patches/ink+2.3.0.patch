diff --git a/node_modules/ink/build/components/App.js b/node_modules/ink/build/components/App.js
index 7719507..39169a5 100644
--- a/node_modules/ink/build/components/App.js
+++ b/node_modules/ink/build/components/App.js
@@ -1,29 +1,66 @@
-"use strict";
+'use strict'
 
-Object.defineProperty(exports, "__esModule", {
-  value: true
-});
-exports.default = void 0;
+Object.defineProperty(exports, '__esModule', {
+  value: true,
+})
+exports.default = void 0
 
-var _readline = _interopRequireDefault(require("readline"));
+// var _readline = _interopRequireDefault(require("readline"));
 
-var _react = _interopRequireWildcard(require("react"));
+var _react = _interopRequireWildcard(require('react'))
 
-var _propTypes = _interopRequireDefault(require("prop-types"));
+var _propTypes = _interopRequireDefault(require('prop-types'))
 
-var _cliCursor = _interopRequireDefault(require("cli-cursor"));
+var _cliCursor = _interopRequireDefault(require('cli-cursor'))
 
-var _AppContext = _interopRequireDefault(require("./AppContext"));
+var _AppContext = _interopRequireDefault(require('./AppContext'))
 
-var _StdinContext = _interopRequireDefault(require("./StdinContext"));
+var _StdinContext = _interopRequireDefault(require('./StdinContext'))
 
-var _StdoutContext = _interopRequireDefault(require("./StdoutContext"));
+var _StdoutContext = _interopRequireDefault(require('./StdoutContext'))
 
-function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
+function _interopRequireWildcard(obj) {
+  if (obj && obj.__esModule) {
+    return obj
+  } else {
+    var newObj = {}
+    if (obj != null) {
+      for (var key in obj) {
+        if (Object.prototype.hasOwnProperty.call(obj, key)) {
+          var desc =
+            Object.defineProperty && Object.getOwnPropertyDescriptor
+              ? Object.getOwnPropertyDescriptor(obj, key)
+              : {}
+          if (desc.get || desc.set) {
+            Object.defineProperty(newObj, key, desc)
+          } else {
+            newObj[key] = obj[key]
+          }
+        }
+      }
+    }
+    newObj.default = obj
+    return newObj
+  }
+}
 
-function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+function _interopRequireDefault(obj) {
+  return obj && obj.__esModule ? obj : { default: obj }
+}
 
-function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
+function _defineProperty(obj, key, value) {
+  if (key in obj) {
+    Object.defineProperty(obj, key, {
+      value: value,
+      enumerable: true,
+      configurable: true,
+      writable: true,
+    })
+  } else {
+    obj[key] = value
+  }
+  return obj
+}
 
 // Root component for all Ink apps
 // It renders stdin and stdout contexts, so that children can access them if needed
@@ -31,112 +68,123 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
 class App extends _react.PureComponent {
   // Determines if TTY is supported on the provided stdin
   isRawModeSupported() {
-    return this.props.stdin.isTTY;
+    return this.props.stdin.isTTY
   }
 
   constructor() {
-    super(); // Count how many components enabled raw mode to avoid disabling
+    super() // Count how many components enabled raw mode to avoid disabling
     // raw mode until all components don't need it anymore
 
-    _defineProperty(this, "handleSetRawMode", isEnabled => {
-      const {
-        stdin
-      } = this.props;
+    _defineProperty(this, 'handleSetRawMode', isEnabled => {
+      const { stdin } = this.props
 
       if (!this.isRawModeSupported()) {
         if (stdin === process.stdin) {
-          throw new Error('Raw mode is not supported on the current process.stdin, which Ink uses as input stream by default.\nRead about how to prevent this error on https://github.com/vadimdemedes/ink/#israwmodesupported');
+          throw new Error(
+            'Raw mode is not supported on the current process.stdin, which Ink uses as input stream by default.\nRead about how to prevent this error on https://github.com/vadimdemedes/ink/#israwmodesupported',
+          )
         } else {
-          throw new Error('Raw mode is not supported on the stdin provided to Ink.\nRead about how to prevent this error on https://github.com/vadimdemedes/ink/#israwmodesupported');
+          throw new Error(
+            'Raw mode is not supported on the stdin provided to Ink.\nRead about how to prevent this error on https://github.com/vadimdemedes/ink/#israwmodesupported',
+          )
         }
       }
 
-      stdin.setEncoding('utf8');
+      stdin.setEncoding('utf8')
 
       if (isEnabled) {
         // Ensure raw mode is enabled only once
         if (this.rawModeEnabledCount === 0) {
-          stdin.addListener('data', this.handleInput);
-          stdin.resume();
-          stdin.setRawMode(true);
+          stdin.addListener('data', this.handleInput)
+          stdin.resume()
+          stdin.setRawMode(true)
 
-          _readline.default.emitKeypressEvents(stdin);
+          // _readline.default.emitKeypressEvents(stdin);
         }
 
-        this.rawModeEnabledCount++;
-        return;
+        this.rawModeEnabledCount++
+        return
       } // Disable raw mode only when no components left that are using it
 
-
       if (--this.rawModeEnabledCount === 0) {
-        stdin.setRawMode(false);
-        stdin.removeListener('data', this.handleInput);
-        stdin.pause();
+        stdin.setRawMode(false)
+        stdin.removeListener('data', this.handleInput)
+        stdin.pause()
       }
-    });
+    })
 
-    _defineProperty(this, "handleInput", input => {
+    _defineProperty(this, 'handleInput', input => {
       // Exit on Ctrl+C
       if (input === '\x03' && this.props.exitOnCtrlC) {
         // eslint-disable-line unicorn/no-hex-escape
-        this.handleExit();
+        this.handleExit()
       }
-    });
+    })
 
-    _defineProperty(this, "handleExit", error => {
+    _defineProperty(this, 'handleExit', error => {
       if (this.isRawModeSupported()) {
-        this.handleSetRawMode(false);
+        this.handleSetRawMode(false)
       }
 
-      this.props.onExit(error);
-    });
+      this.props.onExit(error)
+    })
 
-    this.rawModeEnabledCount = 0;
+    this.rawModeEnabledCount = 0
   }
 
   render() {
-    return _react.default.createElement(_AppContext.default.Provider, {
-      value: {
-        exit: this.handleExit
-      }
-    }, _react.default.createElement(_StdinContext.default.Provider, {
-      value: {
-        stdin: this.props.stdin,
-        setRawMode: this.handleSetRawMode,
-        isRawModeSupported: this.isRawModeSupported()
-      }
-    }, _react.default.createElement(_StdoutContext.default.Provider, {
-      value: {
-        stdout: this.props.stdout
-      }
-    }, this.props.children)));
+    return _react.default.createElement(
+      _AppContext.default.Provider,
+      {
+        value: {
+          exit: this.handleExit,
+        },
+      },
+      _react.default.createElement(
+        _StdinContext.default.Provider,
+        {
+          value: {
+            stdin: this.props.stdin,
+            setRawMode: this.handleSetRawMode,
+            isRawModeSupported: this.isRawModeSupported(),
+          },
+        },
+        _react.default.createElement(
+          _StdoutContext.default.Provider,
+          {
+            value: {
+              stdout: this.props.stdout,
+            },
+          },
+          this.props.children,
+        ),
+      ),
+    )
   }
 
   componentDidMount() {
-    _cliCursor.default.hide(this.props.stdout);
+    _cliCursor.default.hide(this.props.stdout)
   }
 
   componentWillUnmount() {
-    _cliCursor.default.show(this.props.stdout); // ignore calling setRawMode on an handle stdin it cannot be called
-
+    _cliCursor.default.show(this.props.stdout) // ignore calling setRawMode on an handle stdin it cannot be called
 
     if (this.isRawModeSupported()) {
-      this.handleSetRawMode(false);
+      this.handleSetRawMode(false)
     }
   }
 
   componentDidCatch(error) {
-    this.handleExit(error);
+    this.handleExit(error)
   }
-
 }
 
-exports.default = App;
+exports.default = App
 
-_defineProperty(App, "propTypes", {
+_defineProperty(App, 'propTypes', {
   children: _propTypes.default.node.isRequired,
   stdin: _propTypes.default.object.isRequired,
   stdout: _propTypes.default.object.isRequired,
   exitOnCtrlC: _propTypes.default.bool.isRequired,
-  onExit: _propTypes.default.func.isRequired
-});
\ No newline at end of file
+  onExit: _propTypes.default.func.isRequired,
+})
